Eatech FleetManager

"Oppimispäiväkirja"

Maanantai:
Kyselyt ei mene läpi jos tekee kyselyt suoraan palvelimelle vaan ne pitää ajaa IIS reverse proxyn läpi.
(Palvelin: http://localhost:23341 IIS: http://localhost:56062/)

Tämän jälkeen /api/car palautti kaksi kovakoodattua autoa. Lähdin kehittämään autojen datamodelia, kun tällä hetkellä niille oli annettu vain id ja mallin vuosi.

"merkki, malli, rekisterinumero, vuosimalli, katsastuspäivämäärä, moottorin koko ja moottorin teho" > csv:n perusteella
"make, model, registration, year, inspection date, engine size, engine power"

Mietin hetken moottorin arvojen kanssa pitäisikö niistä alustaa inttejä vai doubleja. Kaikki csv:n arvot oli tasalukuja.
Alkuun alustinkin ne inteiksi, mutta mietin ettei se ole realistista, kaikkian autojen arvot eivät oikeasti ole tasalukuja moottorin koossa tai tehossa. => doubleksi

Car.cs ja CarDto.cs vastaamaan toisiaan. Kovakoodatuille autoille tarvittavat tiedot ja tarkistetaan kytkennän savun hälvettyä.

Ei kaatunut, tuloksiakin saatiin, mutta ei kyllä tietoja silti oikein haettu. Tuloksissa nullia, nollaa ja day 1:stä. Vuosi ja id tulee edelleen oikein. Controllerille ehkä kannattaisi kertoa että palautetaas muuten nää loputkin tiedot...

Yritys 2. tuotti järkeviä tuloksia. Sitten on tarkoituksena pystyttää oikea tietokanta, sylkeä csv sinne ja saada ohjelma keskustelemaan kannan kanssa.

Ennen kannan pystyttämistä pyörsin päätökseni moottorin arvoista, palaankin int:teihin, tajusin että moottorin koko on cc, jonka jälkeen arvot voivat jo realistisesti olla kokonaislukuja.

Aloin asentamaan MSMS:ää ja SQL Server 2017 Developer Editionia. Näiden jälkeen pistin päivän pulkkaan ja ensimmäinen commit.

Tiistai:
Loin paikallisen tietokannan ja importtasin csv:n sinne suoraan SSMS:ssä Tasks: Import Flat File, katsoin että muuttujien tyypit olivat oikeita (olivat automaagisesti). Tämän jälkeen loin uuden käyttäjän toimimaan yhteyden ottoon VS kautta. Testasin toimiiko uusi käyttäjä. Perinteisesti unohdin sallia SQL Server Authentication moden ja hieman sai taas ihmetellä miksei juuri luodulla käyttäjälle saa kiinni.

Huomasin, että olin tottunut käsittelemään .NET Framework projekteja ja Entity Framework ei toimi suoraan .NET Coressa.

Torstai: 
Tähän väliin ennenkuin teen enempää kannalla lisäsin sinne autoille id sarakkeen ja tein siitä primary keyn. Parantaa laajennettavuutta kun tulee kantaan useampi taulu jotka käyttävät autojen tietoja.

https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db

Tuon ohjeen mukaan sain toimivan yhteyden kantaan ja /api/car palautti onnistuneesti kaikki 10k autoa.

Perjantai:
Tarinointi on jäänyt vähän vähemmälle, perus crud näytti jo toimivan, mutta autojen lisäämisessä huomasin ettei Id generoidukkaan ja 2. lisäyksen kohdalla aloin saamaan 500 vastaukseksi kun hajoaa tallentamisen yritykseen.

Surullisen pitkän taistelun jälkeen selvisi, että olin tehnyt kannan Id:n vaan vammasesti ja se ei osannut päivittää asiaa.

Testaamiset jää taas välistä, mutta ainakin nyt onnistuin luomaan tän hetken projektilla uuden auton joka sai uuden oman Id:n.

Lauantai:
CRUD on toiminnassa. Myös autohaun filtteröinti toimii. Filtteröintiä varten tein luokan mikä ottaa kyselyn bodysta kiinni.

Sunnuntai:
Lisäsin Swaggerin, kirjotin README:n tutkin publishaamista.